{
  "articles": [
    {
      "id": "1",
      "title": "TypeScript news",
      "subtitle": "TypeScript 5.0 и 4.9: оцениваем и сравниваем изменения.",
      "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Typescript_logo_2020.svg/2048px-Typescript_logo_2020.svg.png",
      "views": "1022",
      "createdAt": "12.02.2023",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Новый оператор satisfies",
          "paragraphs": [
            "Позволяет нам проверить соответствие выражения некоторому типу, не меняя сам тип. Это помогает при работе с объектами со смешанными типами данных.",
            "Рассмотрим на примере:"
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "type FormFields = \"name\" | \"surname\" | \"age\";\n\nconst data: Record<FormFields, number | string> = {\n    name: \"name\",\n    surname: \"surname\",\n    age: 21,\n}\n\nconst newAge = data.age * 2;\nconst nameUpperCase = data.name.toUpperCase();"
        },
        {
          "id": "3",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
            "Объект data имеет как числовые, так и строковые значения, поэтому при работе с этим объектом мы получаем следующие ошибки:"
          ]
        },
        {
          "id": "4",
          "type": "CODE",
          "code": "The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type. \n\n\nProperty 'toUpperCase' does not exist on type 'string | number'.\nProperty 'toUpperCase' does not exist on type 'number'."
        },
        {
          "id": "5",
          "type": "TEXT",
          "title": "Оптимизация TypeScript",
          "paragraphs": [
            "TypeScript версии 5.0 добавляет множество изменений в структуре кода, структуре данных и алгоритмических реализациях. Это позволяет ускорить не только работу TypeScript, но даже и его установку.",
            "Рассмотрим на примере:"
          ]
        },
        {
          "id": "6",
          "type": "IMAGE",
          "src": "https://habrastorage.org/r/w1560/getpro/habr/upload_files/f69/cf0/dd9/f69cf0dd9982290b34166bd88d239d8a.png"
        },
        {
          "id": "7",
          "type": "TEXT",
          "title": "Функции-декораторы",
          "paragraphs": [
            "Это обыкновенные функции, которые позволяют добавить дополнительное поведение классу, методу, свойству.",
            "Пример класса без декоратора:"
          ]
        },
        {
          "id": "8",
          "type": "CODE",
          "code": "class Person {\n  age: number = 0\n\n  changeAge() {\n    console.log(\"Logger: Func start\")\n    console.log(\"changing age...\")\n    console.log(\"Logger: Func end\")\n  }\n}\n\nconst person = new Person();\nperson.changeAge()"
        },
        {
          "id": "9",
          "type": "TEXT",
          "paragraphs": [
            "Мы видим, что нам необходимо добавить логирование для метода, чтобы отследить его работу. В этом случае к нам на помощь приходят декораторы.",
            "Пример декоратора:"
          ]
        },
        {
          "id": "10",
          "type": "CODE",
          "code": "function Logger<This, Args extends number[], Return>(\n    target: (this: This, ...args: Args) => Return, \n    context: ClassMethodDecoratorContext<This, (this: This, ...args: Args) => Return>\n) {\n  return function(this: This, ...args: Args) {\n    console.log(\"Logger: Func start\")\n    const result = target.call(this, ...args)\n    console.log(\"Logger: Func end\")\n\n    return result\n  }\n}"
        }
      ]
    },
    {
      "id": "2",
      "title": "Как настроить Node.js Express сервер для React",
      "subtitle": "Руководство поможет вам разработать простое приложение на React и подключить его к серверу, созданному с использованием Node.js.",
      "img": "https://miro.medium.com/v2/resize:fit:365/1*Jr3NFSKTfQWRUyjblBSKeg.png",
      "views": "722",
      "createdAt": "12.08.2023",
      "userId": "2",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Необходимые условия",
          "paragraphs": [
            "Для успешного выполнения данного гайда будет полезно иметь следующее:",
            "1) Предварительный опыт работы с Node.js, Express, npm и React.js.",
            "2) Установленный Node.js.",
            "3) Текстовый редактор",
            "4) Веб-браузер, в данном случае Google Chrome."
          ]
        },
        {
          "id": "2",
          "type": "IMAGE",
          "title": "Настройка структуры папок",
          "src": "https://habrastorage.org/r/w1560/getpro/habr/upload_files/d98/db3/c16/d98db3c1630fbb5f82949e79b75226a2.png"
        },
        {
          "id": "3",
          "type": "TEXT",
          "paragraphs": [
            "Первым шагом будет создание корневой папки для нашего приложения с именем express-react-app, в котором будут содержаться все файлы приложения. Затем мы создадим папку client, которая будет содержать все файлы React приложения.",
            "Папка node_modules будет содержать все пакеты NPM для файла server.js. Папка node_modules будет автоматически создана при установке пакетов NPM.",
            "Далее нам потребуется создать файл server.js. В этом файле будет размещен сервер Express, который будет выступать в качестве нашего бэкенда. Файл package.json будет автоматически сгенерирован, когда в терминале будет выполнена команда npm init -y."
          ]
        },
        {
          "id": "4",
          "type": "TEXT",
          "title": "Создание React приложения",
          "paragraphs": [
            "Из терминала перейдите в корневую директорию с помощью команды cd и выполните следующие команды:"
          ]
        },
        {
          "id": "5",
          "type": "CODE",
          "code": "$cd express-react-app\n$npx create-react-app client"
        }
      ]
    },
    {
      "id": "3",
      "title": "Supercharge Your React Projects with Custom Hooks",
      "img": "https://res.cloudinary.com/practicaldev/image/fetch/s--It08Rf6h--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/anmi8d6zn1f5fucgc20y.png",
      "views": "192",
      "createdAt": "10.07.2023",
      "userId": "3",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "paragraphs": [
            "In this article, we dive into the world of custom React hooks and explore the incredible potential they hold for supercharging your work projects. With over 20 carefully crafted hooks at your disposal, I personally utilize these hooks in my own work projects, and now I'm excited to share them with you. From enhancing functionality to streamlining workflows, these custom hooks are designed to empower developers and deliver user-friendly experiences. Join us on this journey as we unleash the power of these 20+ hooks and unlock new levels of productivity and innovation in your React projects."
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "title": "useClickOutside",
          "paragraphs": [
            "The useClickOutside hook is designed to simplify the process of detecting clicks outside a specified component. By utilizing the useEventListener hook, it listens for click events on the document level, allowing you to trigger a callback function when a click occurs outside the provided component's reference.",
            "One of the main advantages of useClickOutside is its ease of use. Simply import the hook into your component and pass the desired component's reference and a callback function. The hook takes care of the event listener setup and cleanup, saving you time and effort. Plus, it works seamlessly with functional components using the useState and useRef hooks.",
            "The potential applications for useClickOutside are endless. It is particularly useful when implementing modal windows, dropdown menus, or any element that should be closed when a user interacts with anything outside of it. By incorporating useClickOutside, you can enhance the user experience by providing intuitive and efficient interactions.",
            "To see useClickOutside in action, take a look at the example above. In this case, the ClickOutsideComponent utilizes the hook to toggle the visibility of a modal window. When the user clicks outside the modal, the provided callback function sets the open state to false, closing the modal. This way, the component offers a sleek and user-friendly way to manage the modal's visibility."
          ]
        },
        {
          "id": "3",
          "type": "CODE",
          "code": "import useEventListener from \"../useEventListener/useEventListener\"\n\nexport default function useClickOutside(ref, cb) {\n    useEventListener(\"click\", e => {\n        if (ref.current == null || ref.current.contains(e.target)) return\n        cb(e)\n    }, document)\n}"
        },

        {
          "id": "4",
          "type": "TEXT",
          "paragraphs": [
            "The potential applications for useClickOutside are endless. It is particularly useful when implementing modal windows, dropdown menus, or any element that should be closed when a user interacts with anything outside of it. By incorporating useClickOutside, you can enhance the user experience by providing intuitive and efficient interactions.",
            "To see useClickOutside in action, take a look at the example above. In this case, the ClickOutsideComponent utilizes the hook to toggle the visibility of a modal window. When the user clicks outside the modal, the provided callback function sets the open state to false, closing the modal. This way, the component offers a sleek and user-friendly way to manage the modal's visibility."
          ]
        },

        {
          "id": "5",
          "type": "CODE",
          "code": "import { useRef, useState } from \"react\"\nimport useClickOutside from \"./useClickOutside\"\n\nexport default function ClickOutsideComponent() {\n    const [open, setOpen] = useState(false)\n    const modalRef = useRef()\n\n    useClickOutside(modalRef, () => {\n        if (open) setOpen(false)\n    })\n\n    return (\n        <>\n            <button onClick={() => setOpen(true)}>Open</button>\n            <div\n                ref={modalRef}\n                style={{\n                    display: open ? \"block\" : \"none\",\n                    backgroundColor: \"blue\",\n                    color: \"white\",\n                    width: \"100px\",\n                    height: \"100px\",\n                    position: \"absolute\",\n                    top: \"calc(50% - 50px)\",\n                    left: \"calc(50% - 50px)\",\n                }}\n            >\n                <span>Modal</span>\n            </div>\n        </>\n    )\n}"
        }
      ]
    },
    {
      "id": "4",
      "title": "Разбираем useId( ) хук под микроскопом",
      "subtitle": "Уже давно я заприметил относительно новый хук useId, с которым давно хотел разобраться для чего он нужен, как он работает и конечно же обязательно нужно заглянуть в исходники. И теперь потыкав этот хук палкой, почитав React документацию, пролистав несколько статей и изучив парочку видео на YouTube.",
      "img": "https://habrastorage.org/r/w1560/getpro/habr/upload_files/cb7/7b1/85d/cb77b185dea8039940d74f0212479537.png",
      "views": "322",
      "createdAt": "09.02.2023",
      "userId": "1",
      "type": [
        "IT",
        "FRONTEND",
        "REACT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Что такое useId( ) ?",
          "paragraphs": [
            "И так, что же делает хук useId()? Он возвращает нам уникальный id, который выглядит следующим образом: :r1:, :r2:, :r3: Странность данного формата id думаю и помогает быть ему более уникальным на странице."
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "title": "Зачем нужен такой невнятный id?",
          "paragraphs": [
            "Чтобы ответить на этот вопрос давайте рассмотрим следующий код:\n\n"
          ]
        },
        {
          "id": "3",
          "type": "CODE",
          "code": "<label>\n  <span>Some label</span>\n  <input name=\"some-input\" />\n</label>"
        },

        {
          "id": "3",
          "type": "IMAGE",
          "src": "https://habrastorage.org/r/w1560/getpro/habr/upload_files/9a2/d27/42f/9a2d2742fdbdbd52662ef0325bcc6eff.jpg"
        }
      ]
    },
    {
      "id": "5",
      "title": "TypeScript and React news",
      "subtitle": "TypeScript 5.0 и 4.9: оцениваем и сравниваем изменения.",
      "img": "https://dev-gang.ru/static/storage/19323330856321185560492900951444365867.png",
      "views": "1022",
      "createdAt": "12.02.2023",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Новый оператор satisfies",
          "paragraphs": [
            "Позволяет нам проверить соответствие выражения некоторому типу, не меняя сам тип. Это помогает при работе с объектами со смешанными типами данных.",
            "Рассмотрим на примере:"
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "type FormFields = \"name\" | \"surname\" | \"age\";\n\nconst data: Record<FormFields, number | string> = {\n    name: \"name\",\n    surname: \"surname\",\n    age: 21,\n}\n\nconst newAge = data.age * 2;\nconst nameUpperCase = data.name.toUpperCase();"
        },
        {
          "id": "3",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
            "Объект data имеет как числовые, так и строковые значения, поэтому при работе с этим объектом мы получаем следующие ошибки:"
          ]
        },
        {
          "id": "4",
          "type": "CODE",
          "code": "The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type. \n\n\nProperty 'toUpperCase' does not exist on type 'string | number'.\nProperty 'toUpperCase' does not exist on type 'number'."
        },
        {
          "id": "5",
          "type": "TEXT",
          "title": "Оптимизация TypeScript",
          "paragraphs": [
            "TypeScript версии 5.0 добавляет множество изменений в структуре кода, структуре данных и алгоритмических реализациях. Это позволяет ускорить не только работу TypeScript, но даже и его установку.",
            "Рассмотрим на примере:"
          ]
        },
        {
          "id": "6",
          "type": "IMAGE",
          "src": "https://habrastorage.org/r/w1560/getpro/habr/upload_files/f69/cf0/dd9/f69cf0dd9982290b34166bd88d239d8a.png"
        },
        {
          "id": "7",
          "type": "TEXT",
          "title": "Функции-декораторы",
          "paragraphs": [
            "Это обыкновенные функции, которые позволяют добавить дополнительное поведение классу, методу, свойству.",
            "Пример класса без декоратора:"
          ]
        },
        {
          "id": "8",
          "type": "CODE",
          "code": "class Person {\n  age: number = 0\n\n  changeAge() {\n    console.log(\"Logger: Func start\")\n    console.log(\"changing age...\")\n    console.log(\"Logger: Func end\")\n  }\n}\n\nconst person = new Person();\nperson.changeAge()"
        },
        {
          "id": "9",
          "type": "TEXT",
          "paragraphs": [
            "Мы видим, что нам необходимо добавить логирование для метода, чтобы отследить его работу. В этом случае к нам на помощь приходят декораторы.",
            "Пример декоратора:"
          ]
        },
        {
          "id": "10",
          "type": "CODE",
          "code": "function Logger<This, Args extends number[], Return>(\n    target: (this: This, ...args: Args) => Return, \n    context: ClassMethodDecoratorContext<This, (this: This, ...args: Args) => Return>\n) {\n  return function(this: This, ...args: Args) {\n    console.log(\"Logger: Func start\")\n    const result = target.call(this, ...args)\n    console.log(\"Logger: Func end\")\n\n    return result\n  }\n}"
        }
      ]
    },
    {
      "id": "6",
      "title": "Как настроить Node.js Express сервер для React",
      "subtitle": "Руководство поможет вам разработать простое приложение на React и подключить его к серверу, созданному с использованием Node.js.",
      "img": "https://codemobiles.com/biz/training/images/react.js.jpg",
      "views": "722",
      "createdAt": "12.08.2023",
      "userId": "2",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Необходимые условия",
          "paragraphs": [
            "Для успешного выполнения данного гайда будет полезно иметь следующее:",
            "1) Предварительный опыт работы с Node.js, Express, npm и React.js.",
            "2) Установленный Node.js.",
            "3) Текстовый редактор",
            "4) Веб-браузер, в данном случае Google Chrome."
          ]
        },
        {
          "id": "2",
          "type": "IMAGE",
          "title": "Настройка структуры папок",
          "src": "https://habrastorage.org/r/w1560/getpro/habr/upload_files/d98/db3/c16/d98db3c1630fbb5f82949e79b75226a2.png"
        },
        {
          "id": "3",
          "type": "TEXT",
          "paragraphs": [
            "Первым шагом будет создание корневой папки для нашего приложения с именем express-react-app, в котором будут содержаться все файлы приложения. Затем мы создадим папку client, которая будет содержать все файлы React приложения.",
            "Папка node_modules будет содержать все пакеты NPM для файла server.js. Папка node_modules будет автоматически создана при установке пакетов NPM.",
            "Далее нам потребуется создать файл server.js. В этом файле будет размещен сервер Express, который будет выступать в качестве нашего бэкенда. Файл package.json будет автоматически сгенерирован, когда в терминале будет выполнена команда npm init -y."
          ]
        },
        {
          "id": "4",
          "type": "TEXT",
          "title": "Создание React приложения",
          "paragraphs": [
            "Из терминала перейдите в корневую директорию с помощью команды cd и выполните следующие команды:"
          ]
        },
        {
          "id": "5",
          "type": "CODE",
          "code": "$cd express-react-app\n$npx create-react-app client"
        }
      ]
    },
    {
      "id": "7",
      "title": "Supercharge Your React Projects with Custom Hooks",
      "img": "https://bs-uploads.toptal.io/blackfish-uploads/components/seo/content/og_image_file/og_image/1154091/0120-Stale-while-revalidate_Data_Fetching_with_React_Hooks-Waldek_Social-2bf46136aefaebe37934c89c0820482b.png",
      "views": "192",
      "createdAt": "10.07.2023",
      "userId": "3",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "paragraphs": [
            "In this article, we dive into the world of custom React hooks and explore the incredible potential they hold for supercharging your work projects. With over 20 carefully crafted hooks at your disposal, I personally utilize these hooks in my own work projects, and now I'm excited to share them with you. From enhancing functionality to streamlining workflows, these custom hooks are designed to empower developers and deliver user-friendly experiences. Join us on this journey as we unleash the power of these 20+ hooks and unlock new levels of productivity and innovation in your React projects."
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "title": "useClickOutside",
          "paragraphs": [
            "The useClickOutside hook is designed to simplify the process of detecting clicks outside a specified component. By utilizing the useEventListener hook, it listens for click events on the document level, allowing you to trigger a callback function when a click occurs outside the provided component's reference.",
            "One of the main advantages of useClickOutside is its ease of use. Simply import the hook into your component and pass the desired component's reference and a callback function. The hook takes care of the event listener setup and cleanup, saving you time and effort. Plus, it works seamlessly with functional components using the useState and useRef hooks.",
            "The potential applications for useClickOutside are endless. It is particularly useful when implementing modal windows, dropdown menus, or any element that should be closed when a user interacts with anything outside of it. By incorporating useClickOutside, you can enhance the user experience by providing intuitive and efficient interactions.",
            "To see useClickOutside in action, take a look at the example above. In this case, the ClickOutsideComponent utilizes the hook to toggle the visibility of a modal window. When the user clicks outside the modal, the provided callback function sets the open state to false, closing the modal. This way, the component offers a sleek and user-friendly way to manage the modal's visibility."
          ]
        },
        {
          "id": "3",
          "type": "CODE",
          "code": "import useEventListener from \"../useEventListener/useEventListener\"\n\nexport default function useClickOutside(ref, cb) {\n    useEventListener(\"click\", e => {\n        if (ref.current == null || ref.current.contains(e.target)) return\n        cb(e)\n    }, document)\n}"
        },

        {
          "id": "4",
          "type": "TEXT",
          "paragraphs": [
            "The potential applications for useClickOutside are endless. It is particularly useful when implementing modal windows, dropdown menus, or any element that should be closed when a user interacts with anything outside of it. By incorporating useClickOutside, you can enhance the user experience by providing intuitive and efficient interactions.",
            "To see useClickOutside in action, take a look at the example above. In this case, the ClickOutsideComponent utilizes the hook to toggle the visibility of a modal window. When the user clicks outside the modal, the provided callback function sets the open state to false, closing the modal. This way, the component offers a sleek and user-friendly way to manage the modal's visibility."
          ]
        },

        {
          "id": "5",
          "type": "CODE",
          "code": "import { useRef, useState } from \"react\"\nimport useClickOutside from \"./useClickOutside\"\n\nexport default function ClickOutsideComponent() {\n    const [open, setOpen] = useState(false)\n    const modalRef = useRef()\n\n    useClickOutside(modalRef, () => {\n        if (open) setOpen(false)\n    })\n\n    return (\n        <>\n            <button onClick={() => setOpen(true)}>Open</button>\n            <div\n                ref={modalRef}\n                style={{\n                    display: open ? \"block\" : \"none\",\n                    backgroundColor: \"blue\",\n                    color: \"white\",\n                    width: \"100px\",\n                    height: \"100px\",\n                    position: \"absolute\",\n                    top: \"calc(50% - 50px)\",\n                    left: \"calc(50% - 50px)\",\n                }}\n            >\n                <span>Modal</span>\n            </div>\n        </>\n    )\n}"
        }
      ]
    },
    {
      "id": "8",
      "title": "Разбираем useId( ) хук под микроскопом",
      "subtitle": "Уже давно я заприметил относительно новый хук useId, с которым давно хотел разобраться для чего он нужен, как он работает и конечно же обязательно нужно заглянуть в исходники. И теперь потыкав этот хук палкой, почитав React документацию, пролистав несколько статей и изучив парочку видео на YouTube.",
      "img": "https://www.educative.io/v2api/editorpage/6018530514305024/image/5753173610332160",
      "views": "322",
      "createdAt": "09.02.2023",
      "userId": "1",
      "type": [
        "IT",
        "FRONTEND",
        "REACT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Что такое useId( ) ?",
          "paragraphs": [
            "И так, что же делает хук useId()? Он возвращает нам уникальный id, который выглядит следующим образом: :r1:, :r2:, :r3: Странность данного формата id думаю и помогает быть ему более уникальным на странице."
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "title": "Зачем нужен такой невнятный id?",
          "paragraphs": [
            "Чтобы ответить на этот вопрос давайте рассмотрим следующий код:\n\n"
          ]
        },
        {
          "id": "3",
          "type": "CODE",
          "code": "<label>\n  <span>Some label</span>\n  <input name=\"some-input\" />\n</label>"
        },

        {
          "id": "3",
          "type": "IMAGE",
          "src": "https://habrastorage.org/r/w1560/getpro/habr/upload_files/9a2/d27/42f/9a2d2742fdbdbd52662ef0325bcc6eff.jpg"
        }
      ]
    }
  ],
  "comments": [
    {
      "id": "1",
      "text": "some comment",
      "articleId": "1",
      "userId": "1"
    },
    {
      "id": "2",
      "text": "content",
      "articleId": "1",
      "userId": "2"
    },
    {
      "id": "3",
      "text": "more comment",
      "articleId": "1",
      "userId": "3"
    },
    {
      "articleId": "1",
      "userId": "1",
      "text": "asddadasd",
      "id": "FRmZJ0e"
    },
    {
      "articleId": "1",
      "userId": "3",
      "text": "lasdb kjasdkagd",
      "id": "7troKyl"
    },
    {
      "articleId": "1",
      "userId": "3",
      "text": "This, Args extends number[]",
      "id": "QytKwF7"
    },
    {
      "articleId": "1",
      "userId": "3",
      "text": "return function(this: This, ...args: Args) {}",
      "id": "13PvoZ9"
    },
    {
      "articleId": "2",
      "userId": "3",
      "text": "Позволяет нам проверить соответствие выражения некоторому типу, не меняя сам тип. Это помогает при работе с объектами со смешанными типами данных.",
      "id": "omopkzJ"
    },
    {
      "articleId": "2",
      "userId": "3",
      "text": "target: (this: This, ...args: Args) => Return",
      "id": "kYIaXaA"
    },
    {
      "articleId": "3",
      "userId": "3",
      "text": "Функции-декораторы",
      "id": "L4rTk5k"
    },
    {
      "articleId": "3",
      "userId": "3",
      "text": "Это обыкновенные функции, которые позволяют добавить дополнительное поведение классу, методу, свойству.",
      "id": "Brlr57a"
    },
    {
      "articleId": "2",
      "userId": "2",
      "text": "оцениваем и сравниваем изменения",
      "id": "kGnYUnf"
    }
  ],
  "users": [
    {
      "id": "1",
      "username": "admin",
      "password": "123",
      "role": "ADMIN",
      "avatar": "https://www.svgrepo.com/show/382112/female-avatar-girl-face-woman-user-8.svg"
    },
    {
      "id": "2",
      "username": "Vasya",
      "password": "456",
      "role": "USER",
      "avatar": "https://cdn5.vectorstock.com/i/1000x1000/43/94/default-avatar-photo-placeholder-icon-grey-vector-38594394.jpg"
    },
    {
      "id": "3",
      "username": "Petya",
      "password": "654",
      "role": "USER",
      "avatar": "https://cdn.pixabay.com/photo/2017/02/23/13/05/avatar-2092113_1280.png"
    }
  ],
  "profile": [
    {
      "id": "1",
      "firstname": "Jane",
      "lastname": "Doe",
      "age": 30,
      "currency": "KZT",
      "country": "Kazakhstan",
      "city": "Almaty",
      "username": "Admin Jane",
      "avatar": "https://www.svgrepo.com/show/382112/female-avatar-girl-face-woman-user-8.svg"
    },
    {
      "id": "2",
      "firstname": "Vasya",
      "lastname": "Ivanov",
      "age": 25,
      "currency": "RUB",
      "country": "Russia",
      "city": "Moscow",
      "username": "Vasya I",
      "avatar": "https://cdn5.vectorstock.com/i/1000x1000/43/94/default-avatar-photo-placeholder-icon-grey-vector-38594394.jpg"
    },
    {
      "id": "3",
      "firstname": "Petya",
      "lastname": "Ivanov",
      "age": 30,
      "currency": "RUB",
      "country": "Russia",
      "city": "Moscow",
      "username": "Petya I",
      "avatar": "https://cdn.pixabay.com/photo/2017/02/23/13/05/avatar-2092113_1280.png"
    }
  ]
}