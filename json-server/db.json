{
  "posts": [
    {
      "id": "1",
      "title": "json-server",
      "author": "typicode"
    },
    {
      "id": "2",
      "title": "json-server 2",
      "author": "typicode 2"
    }
  ],
  "articles": [
    {
      "id": "1",
      "title": "TypeScript news",
      "subtitle": "TypeScript 5.0 и 4.9: оцениваем и сравниваем изменения.",
      "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Typescript_logo_2020.svg/1024px-Typescript_logo_2020.svg.png",
      "views": "1022",
      "createdAt": "12.02.2023",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Новый оператор satisfies",
          "paragraphs": [
            "Позволяет нам проверить соответствие выражения некоторому типу, не меняя сам тип. Это помогает при работе с объектами со смешанными типами данных.",
            "Рассмотрим на примере:"
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "type FormFields = \"name\" | \"surname\" | \"age\";\n\nconst data: Record<FormFields, number | string> = {\n    name: \"name\",\n    surname: \"surname\",\n    age: 21,\n}\n\nconst newAge = data.age * 2;\nconst nameUpperCase = data.name.toUpperCase();"
        },
        {
          "id": "3",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
            "Объект data имеет как числовые, так и строковые значения, поэтому при работе с этим объектом мы получаем следующие ошибки:"
          ]
        },
        {
          "id": "4",
          "type": "CODE",
          "code": "The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type. \n\n\nProperty 'toUpperCase' does not exist on type 'string | number'.\nProperty 'toUpperCase' does not exist on type 'number'."
        },
        {
          "id": "5",
          "type": "TEXT",
          "title": "Оптимизация TypeScript",
          "paragraphs": [
            "TypeScript версии 5.0 добавляет множество изменений в структуре кода, структуре данных и алгоритмических реализациях. Это позволяет ускорить не только работу TypeScript, но даже и его установку.",
            "Рассмотрим на примере:"
          ]
        },
        {
          "id": "6",
          "type": "IMAGE",
          "src": "https://habrastorage.org/r/w1560/getpro/habr/upload_files/f69/cf0/dd9/f69cf0dd9982290b34166bd88d239d8a.png"
        },
        {
          "id": "7",
          "type": "TEXT",
          "title": "Функции-декораторы",
          "paragraphs": [
            "Это обыкновенные функции, которые позволяют добавить дополнительное поведение классу, методу, свойству.",
            "Пример класса без декоратора:"
          ]
        },
        {
          "id": "8",
          "type": "CODE",
          "code": "class Person {\n  age: number = 0\n\n  changeAge() {\n    console.log(\"Logger: Func start\")\n    console.log(\"changing age...\")\n    console.log(\"Logger: Func end\")\n  }\n}\n\nconst person = new Person();\nperson.changeAge()"
        },
        {
          "id": "9",
          "type": "TEXT",
          "paragraphs": [
            "Мы видим, что нам необходимо добавить логирование для метода, чтобы отследить его работу. В этом случае к нам на помощь приходят декораторы.",
            "Пример декоратора:"
          ]
        },
        {
          "id": "10",
          "type": "CODE",
          "code": "function Logger<This, Args extends number[], Return>(\n    target: (this: This, ...args: Args) => Return, \n    context: ClassMethodDecoratorContext<This, (this: This, ...args: Args) => Return>\n) {\n  return function(this: This, ...args: Args) {\n    console.log(\"Logger: Func start\")\n    const result = target.call(this, ...args)\n    console.log(\"Logger: Func end\")\n\n    return result\n  }\n}"
        }
      ]
    }
  ],
  "comments": [
    {
      "id": "1",
      "text": "some comment",
      "articleId": "1",
      "userId": "1"
    },
    {
      "id": "2",
      "text": "content",
      "articleId": "1",
      "userId": "1"
    },
    {
      "id": "2",
      "text": "more comment",
      "articleId": "1",
      "userId": "1"
    }
  ],
  "users": [
    {
      "id": "1",
      "username": "admin",
      "password": "123",
      "role": "ADMIN"
    },
    {
      "id": "2",
      "username": "Vasya",
      "password": "456",
      "role": "USER"
    }
  ],
  "profile": {
    "firstname": "Jane",
    "lastname": "Doe",
    "age": 30,
    "currency": "KZT",
    "country": "Kazakhstan",
    "city": "Almaty",
    "username": "admin",
    "avatar": "https://www.svgrepo.com/show/382112/female-avatar-girl-face-woman-user-8.svg"
  }
}